// backend/src/controllers/sensor.controller.ts (VERSION CORRIG√âE COMPL√àTE)
import { Response } from 'express';
import { RowDataPacket, ResultSetHeader } from 'mysql2';
import db from '../services/db';
import { AuthRequest } from '../middleware/auth';

interface Sensor {
  id: number;
  name: string;
  type: string;
  location: string;
  status: 'actif' | 'inactif' | 'maintenance';
  installed_at: string;
  latitude?: number;
  longitude?: number;
}

interface SensorRequest {
  name: string;
  type: string;
  location: string;
  status: 'actif' | 'inactif' | 'maintenance';
  installed_at: string;
  latitude?: number;
  longitude?: number;
}

// GET /api/sensors - R√©cup√©rer tous les capteurs
export const getSensors = async (req: AuthRequest, res: Response) => {
  try {
    console.log('üîç R√©cup√©ration de tous les capteurs...');

    const [rows] = await db.execute<RowDataPacket[]>(
      'SELECT * FROM sensors ORDER BY id DESC'
    );

    console.log(`‚úÖ ${rows.length} capteurs r√©cup√©r√©s`);
    res.json(rows);
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des capteurs:', error);
    res.status(500).json({
      error: 'Erreur interne du serveur',
      message: 'Impossible de r√©cup√©rer les capteurs',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
};

// GET /api/sensors/:id - R√©cup√©rer un capteur par ID
export const getSensorById = async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;

    if (!id || isNaN(Number(id))) {
      return res.status(400).json({
        error: 'ID invalide',
        message: 'L\'ID du capteur doit √™tre un nombre valide'
      });
    }

    const [rows] = await db.execute<RowDataPacket[]>(
      'SELECT * FROM sensors WHERE id = ?',
      [id]
    );

    if (rows.length === 0) {
      return res.status(404).json({
        error: 'Capteur non trouv√©',
        message: `Aucun capteur trouv√© avec l'ID ${id}`
      });
    }

    res.json(rows[0]);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration du capteur:', error);
    res.status(500).json({
      error: 'Erreur interne du serveur',
      message: 'Impossible de r√©cup√©rer le capteur'
    });
  }
};

// POST /api/sensors - Cr√©er un nouveau capteur
export const createSensor = async (req: AuthRequest, res: Response) => {
  try {
    console.log('üìù Tentative de cr√©ation d\'un capteur:', req.body);

    const {
      name,
      type,
      location,
      status,
      installed_at,
      latitude,
      longitude
    }: SensorRequest = req.body;

    // Validation des donn√©es obligatoires
    if (!name || !type || !location || !status || !installed_at) {
      console.log('‚ùå Donn√©es manquantes pour la cr√©ation');
      return res.status(400).json({
        error: 'Donn√©es manquantes',
        message: 'Les champs name, type, location, status et installed_at sont requis'
      });
    }

    // V√©rifier si le type est valide
    const validTypes = ['temperature', 'air_quality', 'noise', 'humidity', 'traffic', 'pollution'];
    if (!validTypes.includes(type)) {
      return res.status(400).json({
        error: 'Type invalide',
        message: `Le type doit √™tre l'un des suivants: ${validTypes.join(', ')}`
      });
    }

    // V√©rifier si le statut est valide
    const validStatuses = ['actif', 'inactif', 'maintenance'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        error: 'Statut invalide',
        message: 'Le statut doit √™tre: actif, inactif ou maintenance'
      });
    }

    // V√©rifier si un capteur avec le m√™me nom existe d√©j√†
    const [duplicateRows] = await db.execute<RowDataPacket[]>(
      'SELECT id FROM sensors WHERE name = ?',
      [name]
    );

    if (duplicateRows.length > 0) {
      return res.status(409).json({
        error: 'Nom de capteur existant',
        message: 'Un capteur avec ce nom existe d√©j√†'
      });
    }

    // Cr√©er le capteur
    const [result] = await db.execute<ResultSetHeader>(
      `INSERT INTO sensors (
        name, type, location, status, installed_at, latitude, longitude
      ) VALUES (?, ?, ?, ?, ?, ?, ?)`,
      [
        name, type, location, status, installed_at,
        latitude || null, longitude || null
      ]
    );

    // R√©cup√©rer le capteur cr√©√©
    const [newSensorRows] = await db.execute<RowDataPacket[]>(
      'SELECT * FROM sensors WHERE id = ?',
      [result.insertId]
    );

    console.log('‚úÖ Capteur cr√©√© avec succ√®s:', newSensorRows[0]);

    res.status(201).json({
      message: 'Capteur cr√©√© avec succ√®s',
      sensor: newSensorRows[0]
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du capteur:', error);
    res.status(500).json({
      error: 'Erreur interne du serveur',
      message: 'Impossible de cr√©er le capteur',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
};

// PUT /api/sensors/:id - Mettre √† jour un capteur
export const updateSensor = async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;
    console.log(`üîÑ Tentative de mise √† jour du capteur ID: ${id}`, req.body);

    const {
      name,
      type,
      location,
      status,
      installed_at,
      latitude,
      longitude
    }: SensorRequest = req.body;

    if (!id || isNaN(Number(id))) {
      console.log('‚ùå ID invalide:', id);
      return res.status(400).json({
        error: 'ID invalide',
        message: 'L\'ID du capteur doit √™tre un nombre valide'
      });
    }

    // Validation des donn√©es obligatoires
    if (!name || !type || !location || !status || !installed_at) {
      console.log('‚ùå Donn√©es manquantes pour la mise √† jour');
      return res.status(400).json({
        error: 'Donn√©es manquantes',
        message: 'Les champs name, type, location, status et installed_at sont requis'
      });
    }

    // V√©rifier si le type est valide
    const validTypes = ['temperature', 'air_quality', 'noise', 'humidity', 'traffic', 'pollution'];
    if (!validTypes.includes(type)) {
      return res.status(400).json({
        error: 'Type invalide',
        message: `Le type doit √™tre l'un des suivants: ${validTypes.join(', ')}`
      });
    }

    // V√©rifier si le statut est valide
    const validStatuses = ['actif', 'inactif', 'maintenance'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        error: 'Statut invalide',
        message: 'Le statut doit √™tre: actif, inactif ou maintenance'
      });
    }

    // V√©rifier si le capteur existe
    const [existingRows] = await db.execute<RowDataPacket[]>(
      'SELECT id FROM sensors WHERE id = ?',
      [id]
    );

    if (existingRows.length === 0) {
      console.log(`‚ùå Capteur non trouv√© avec l'ID: ${id}`);
      return res.status(404).json({
        error: 'Capteur non trouv√©',
        message: `Aucun capteur trouv√© avec l'ID ${id}`
      });
    }

    // V√©rifier si un autre capteur avec le m√™me nom existe
    const [duplicateRows] = await db.execute<RowDataPacket[]>(
      'SELECT id FROM sensors WHERE name = ? AND id != ?',
      [name, id]
    );

    if (duplicateRows.length > 0) {
      console.log(`‚ùå Nom de capteur d√©j√† utilis√©: ${name}`);
      return res.status(409).json({
        error: 'Nom de capteur existant',
        message: 'Un autre capteur avec ce nom existe d√©j√†'
      });
    }

    // Mettre √† jour le capteur
    console.log('üîÑ Ex√©cution de la mise √† jour...');
    const [updateResult] = await db.execute<ResultSetHeader>(
      `UPDATE sensors SET 
        name = ?, type = ?, location = ?, status = ?, installed_at = ?,
        latitude = ?, longitude = ?
      WHERE id = ?`,
      [
        name, type, location, status, installed_at,
        latitude || null, longitude || null, id
      ]
    );

    console.log('üìä R√©sultat de la mise √† jour:', updateResult);

    // V√©rifier si la mise √† jour a affect√© une ligne
    if (updateResult.affectedRows === 0) {
      console.log(`‚ùå Aucune ligne affect√©e lors de la mise √† jour de l'ID: ${id}`);
      return res.status(404).json({
        error: 'Mise √† jour √©chou√©e',
        message: 'Aucune modification effectu√©e'
      });
    }

    // R√©cup√©rer le capteur mis √† jour
    const [updatedRows] = await db.execute<RowDataPacket[]>(
      'SELECT * FROM sensors WHERE id = ?',
      [id]
    );

    console.log('‚úÖ Capteur mis √† jour avec succ√®s:', updatedRows[0]);

    res.json({
      message: 'Capteur mis √† jour avec succ√®s',
      sensor: updatedRows[0]
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour du capteur:', error);
    res.status(500).json({
      error: 'Erreur interne du serveur',
      message: 'Impossible de mettre √† jour le capteur',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
};

// DELETE /api/sensors/:id - Supprimer un capteur
export const deleteSensor = async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;

    if (!id || isNaN(Number(id))) {
      return res.status(400).json({
        error: 'ID invalide',
        message: 'L\'ID du capteur doit √™tre un nombre valide'
      });
    }

    // V√©rifier si le capteur existe
    const [existingRows] = await db.execute<RowDataPacket[]>(
      'SELECT id, name FROM sensors WHERE id = ?',
      [id]
    );

    if (existingRows.length === 0) {
      return res.status(404).json({
        error: 'Capteur non trouv√©',
        message: `Aucun capteur trouv√© avec l'ID ${id}`
      });
    }

    const sensorName = existingRows[0].name;

    // V√©rifier s'il y a des donn√©es associ√©es (optionnel)
    let dataCount = 0;
    try {
      const [dataRows] = await db.execute<RowDataPacket[]>(
        'SELECT COUNT(*) as count FROM sensor_data WHERE sensor_id = ?',
        [id]
      );
      dataCount = dataRows[0].count;
    } catch {
      // Ignorer l'erreur si la table sensor_data n'existe pas
    }

    // Supprimer le capteur
    await db.execute('DELETE FROM sensors WHERE id = ?', [id]);

    res.json({
      message: 'Capteur supprim√© avec succ√®s',
      sensor: {
        id: parseInt(id),
        name: sensorName,
        associated_data_count: dataCount
      }
    });
  } catch (error) {
    console.error('Erreur lors de la suppression du capteur:', error);
    res.status(500).json({
      error: 'Erreur interne du serveur',
      message: 'Impossible de supprimer le capteur'
    });
  }
};

// GET /api/sensors/stats - Statistiques des capteurs
export const getSensorStats = async (req: AuthRequest, res: Response) => {
  try {
    // Statistiques g√©n√©rales
    const [totalRows] = await db.execute<RowDataPacket[]>(
      'SELECT COUNT(*) as total FROM sensors'
    );

    const [statusRows] = await db.execute<RowDataPacket[]>(
      'SELECT status, COUNT(*) as count FROM sensors GROUP BY status'
    );

    const [typeRows] = await db.execute<RowDataPacket[]>(
      'SELECT type, COUNT(*) as count FROM sensors GROUP BY type'
    );

    // Capteurs r√©cemment ajout√©s (derniers 30 jours)
    const [recentRows] = await db.execute<RowDataPacket[]>(
      'SELECT COUNT(*) as count FROM sensors WHERE installed_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)'
    );

    const stats = {
      total: totalRows[0].total,
      recent_additions: recentRows[0].count,
      by_status: statusRows.reduce((acc: any, row: any) => {
        acc[row.status] = row.count;
        return acc;
      }, {}),
      by_type: typeRows.reduce((acc: any, row: any) => {
        acc[row.type] = row.count;
        return acc;
      }, {})
    };

    res.json(stats);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des statistiques:', error);
    res.status(500).json({
      error: 'Erreur interne du serveur',
      message: 'Impossible de r√©cup√©rer les statistiques'
    });
  }
};